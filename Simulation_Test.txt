// Penser à inclure le bon fichier sur LW ...
include("Sim_01");

//var idLeek_01 = DefaultLeekCreation(306, 12, 10, null, [47], []);
var myID = DefaultMyLeekCreation(306, 12, 10, null, [], []);
/*
global _OPERATIONS = 0;
function StartOperation () {_OPERATIONS = getOperations();}
function EndOperation () {return getOperations() - _OPERATIONS - 4;}
*/
var result = 0;
var obstacles = [];
var me = 0;
var myCell = 0;

StartOperation();
	getLeek();
debug((EndOperation()) + " opérations pour getLeek() -> " + (((me = getLeek()) === 1000)?("TRUE") : (me + " should be " + 1000)));

StartOperation();
	getCell(me);
debug((EndOperation()) + " opérations pour getCell() -> " + (((myCell = getCell(me)) === 306)?("TRUE") : (myCell + " should be " + 306)));

StartOperation();
	getObstacles();
debug((EndOperation()) + " opérations pour getObstacles() -> " + ((typeOf((obstacles = getObstacles())) === TYPE_ARRAY)?("TRUE") : (typeOf(obstacles) + " should be " + TYPE_ARRAY))); mark(obstacles, COLOR_RED);

StartOperation();
	getCellContent(0);
debug((EndOperation()) + " opérations pour getCellContent(0) -> " + (((result = getCellContent(0)) === CELL_EMPTY)?("TRUE") : (result + " should be " + CELL_EMPTY)));

StartOperation();
	getCellContent(obstacles[0]);
debug((EndOperation() - 5) + " opérations pour getCellContent(obstacles[0]) -> " + (((result = getCellContent(obstacles[0])) === CELL_OBSTACLE)?("TRUE") : (result + " should be " + CELL_OBSTACLE)));

StartOperation();
	getCellContent(306);
debug((EndOperation()) + " opérations pour getCellContent(306) -> " + (((result = getCellContent(306))  === CELL_PLAYER)?("TRUE") : (result + " should be " + CELL_PLAYER)));

StartOperation();
	getCellContent(getCell(getLeek()));
debug((EndOperation() - 8) + " opérations pour getCellContent(getCell(getLeek())) -> " + (((result = getCellContent(getCell(getLeek()))) === CELL_PLAYER)?("TRUE") : (result + " should be " + CELL_PLAYER)));

StartOperation();
	isLeek(getCell(getLeek()));
debug((EndOperation()) + " opérations pour isLeek(getCell(getLeek()))) -> " + (((result = isLeek(getCell(getLeek()))) === true)?("TRUE") : (result + " should be " + true)));

StartOperation();
	isObstacle(obstacles[0]);
debug((EndOperation()) + " opérations pour isObstacle(obstacles[0])) -> " + (((result = isObstacle(obstacles[0])) === true)?("TRUE") : (result + " should be " + true)));

StartOperation();
	isEmptyCell(0);
debug((EndOperation()) + " opérations pour isEmptyCell(0) -> " + (((result = isEmptyCell(0)) === true)?("TRUE") : (result + " should be " + true)));

StartOperation();
	getLeekOnCell(getCell(getLeek()));
debug((EndOperation()) + " opérations pour getLeekOnCell(getCell(getLeek()) -> " + (((result = getLeekOnCell(getCell(getLeek()))) === getLeek())?("TRUE") : (result + " should be " + getLeek())));